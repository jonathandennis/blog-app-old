{"ast":null,"code":"import blogService from '../services/blogs';\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action now: ', action);\n\n  switch (action.type) {\n    case 'INIT_BLOGS':\n      return action.data;\n\n    case 'NEW_BLOG':\n      return [...state, action.data];\n\n    case 'DELETE_BLOG':\n      {\n        return state.filter(blog => blog.id !== action.data);\n      }\n\n    case 'LIKE_BLOG':\n      {\n        const id = action.data.data.id;\n        return state.map(blog => blog.id !== id ? blog : action.data.data);\n      }\n\n    case 'NEW_COMMENT':\n      {\n        const id = action.data.id;\n        console.log('id in NEW_COMMENT blogReducer: ', id);\n        return;\n        /* commentedBlog =\n        return (...blog,\n           comments: [...blog.comments, { comment }]) */\n      }\n\n    /* case 'ADD_COMMENT': {\n      const commentedBlog = action.data\n      console.log('comentedBlog in ADD_COMMENT: ', commentedBlog)\n      return state.map(blog => blog.id !== commentedBlog ? blog : action.data)\n    } */\n\n    default:\n      return state;\n  }\n};\n\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs\n    });\n  };\n};\nexport const createBlog = (title, author, url) => {\n  return async dispatch => {\n    const newBlog = await blogService.create(title, author, url);\n    dispatch({\n      type: 'NEW_BLOG',\n      data: newBlog\n    });\n  };\n};\nexport const likeBlog = blog => {\n  const changedBlog = { ...blog,\n    likes: blog.likes + 1\n  };\n  return async dispatch => {\n    const newObject = await blogService.update(blog.id, changedBlog);\n    dispatch({\n      type: 'LIKE_BLOG',\n      data: newObject\n    });\n  };\n};\nexport const addComment = (id, comment) => {\n  console.log('id in addComment reducer: ', id);\n  console.log('comment in addComment reducer: ', comment);\n  return async dispatch => {\n    const newComment = await blogService.addComment(id, comment);\n    console.log('newComment in addComment reducer: ', newComment);\n    dispatch({\n      type: 'NEW_COMMENT',\n      data: newComment\n    });\n  };\n};\n/* export const addComment = (id, comment) => {\n  const newComment = { text: comment }\n  console.log('id in addComment reducer: ', id)\n  return async dispatch => {\n    const data = await blogService.updateComment(id, newComment)\n    dispatch({\n      type: 'NEW_COMMENT',\n      data\n    })\n  }\n} */\n\n/* export const addComment = (blog, comment) => {\n  console.log('blog in addComment reducer: ', blog)\n  // const commentedBlog = {\n  //   ...blog,\n  //   comments: [...blog.comments, { comment }]\n  // }\n  console.log('blog in addComment reducer: ', blog)\n  console.log('blog.id in addComment reducer: ', blog.id)\n  return async dispatch => {\n    const newComment = await blogService.updateComment(blog.id, comment)\n    dispatch({\n      type: 'NEW_COMMENT',\n      data: newComment\n    })\n  }\n} */\n\nexport const deleteBlog = id => {\n  return async dispatch => {\n    await blogService.remove(id);\n    console.log('blog to delete: ', id);\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    });\n  };\n};\nexport default blogReducer;","map":{"version":3,"sources":["/Users/jonathandennis/MOOC_fullStack/part5/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","blogReducer","state","action","console","log","type","data","filter","blog","id","map","initializeBlogs","dispatch","blogs","getAll","createBlog","title","author","url","newBlog","create","likeBlog","changedBlog","likes","newObject","update","addComment","comment","newComment","deleteBlog","remove"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state)\n  console.log('action now: ', action)\n  switch (action.type) {\n  case 'INIT_BLOGS':\n    return action.data\n  case 'NEW_BLOG':\n    return [...state, action.data]\n  case 'DELETE_BLOG': {\n    return state.filter(blog => blog.id !== action.data)\n  }\n  case 'LIKE_BLOG': {\n    const id = action.data.data.id\n    return state.map(blog => blog.id !== id ? blog : action.data.data)\n  }\n  case 'NEW_COMMENT': {\n    const id = action.data.id\n    console.log('id in NEW_COMMENT blogReducer: ', id)\n    return\n    /* commentedBlog =\n    return (...blog,\n       comments: [...blog.comments, { comment }]) */\n  }\n\n  /* case 'ADD_COMMENT': {\n    const commentedBlog = action.data\n    console.log('comentedBlog in ADD_COMMENT: ', commentedBlog)\n    return state.map(blog => blog.id !== commentedBlog ? blog : action.data)\n  } */\n\n  default:\n    return state\n  }\n}\n\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    dispatch({\n      type: 'INIT_BLOGS',\n      data: blogs,\n    })\n  }\n}\n\nexport const createBlog = (title, author, url) => {\n  return async dispatch => {\n    const newBlog = await blogService.create(title, author, url)\n    dispatch({\n      type: 'NEW_BLOG',\n      data: newBlog,\n    })\n  }\n}\n\nexport const likeBlog = (blog) => {\n  const changedBlog = {\n    ...blog,\n    likes: blog.likes + 1\n  }\n  return async dispatch => {\n    const newObject = await blogService.update(blog.id, changedBlog)\n    dispatch({\n      type: 'LIKE_BLOG',\n      data: newObject\n    })\n  }\n}\n\nexport const addComment = (id, comment) => {\n  console.log('id in addComment reducer: ', id)\n  console.log('comment in addComment reducer: ', comment)\n  return async dispatch => {\n    const newComment = await blogService.addComment(id, comment)\n    console.log('newComment in addComment reducer: ', newComment)\n    dispatch({\n      type: 'NEW_COMMENT',\n      data: newComment\n    })\n  }\n}\n\n/* export const addComment = (id, comment) => {\n  const newComment = { text: comment }\n  console.log('id in addComment reducer: ', id)\n  return async dispatch => {\n    const data = await blogService.updateComment(id, newComment)\n    dispatch({\n      type: 'NEW_COMMENT',\n      data\n    })\n  }\n} */\n/* export const addComment = (blog, comment) => {\n  console.log('blog in addComment reducer: ', blog)\n  // const commentedBlog = {\n  //   ...blog,\n  //   comments: [...blog.comments, { comment }]\n  // }\n  console.log('blog in addComment reducer: ', blog)\n  console.log('blog.id in addComment reducer: ', blog.id)\n  return async dispatch => {\n    const newComment = await blogService.updateComment(blog.id, comment)\n    dispatch({\n      type: 'NEW_COMMENT',\n      data: newComment\n    })\n  }\n} */\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    await blogService.remove(id)\n    console.log('blog to delete: ', id)\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id,\n    })\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}