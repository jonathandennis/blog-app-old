{"ast":null,"code":"import blogService from '../services/blogs';\nimport { setNotification } from './notificationReducer';\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action now: ', action);\n\n  switch (action.type) {\n    case 'INIT_BLOGS':\n      return action.data;\n\n    case 'NEW_BLOG':\n      return [...state, action.data];\n\n    case 'DELETE_BLOG':\n      {\n        return state.filter(blog => blog.id !== action.data);\n      }\n\n    case 'LIKE_BLOG':\n      {\n        const id = action.data.data.id;\n        return state.map(blog => blog.id !== id ? blog : action.data.data);\n      }\n\n    case 'NEW_COMMENT':\n      {\n        const id = action.id;\n        const comment = action.data;\n        return state.map(blog => blog.id !== id ? blog : { ...blog,\n          comments: [...blog.comments, comment]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    try {\n      const blogs = await blogService.getAll();\n      dispatch({\n        type: 'INIT_BLOGS',\n        data: blogs\n      });\n    } catch (exception) {\n      dispatch(setNotification('Error getting blogs!'));\n    }\n  };\n};\nexport const createBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.create(title, author, url);\n      dispatch({\n        type: 'NEW_BLOG',\n        data: newBlog\n      });\n    } catch (exception) {\n      dispatch(setNotification('Error adding blog, missing content!'));\n    }\n  };\n};\nexport const likeBlog = blog => {\n  const changedBlog = { ...blog,\n    likes: blog.likes + 1\n  };\n  return async dispatch => {\n    try {\n      const newObject = await blogService.update(blog.id, changedBlog);\n      dispatch({\n        type: 'LIKE_BLOG',\n        data: newObject\n      });\n    } catch (exception) {\n      dispatch(setNotification('Error liking blog!'));\n    }\n  };\n};\nexport const addComment = (id, comment) => {\n  return async dispatch => {\n    try {\n      const newComment = await blogService.addComment(id, comment);\n      dispatch({\n        type: 'NEW_COMMENT',\n        data: newComment,\n        id\n      });\n    } catch (exception) {\n      dispatch(setNotification('Error, Requires content!'));\n    }\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    try {\n      await blogService.remove(id);\n      console.log('blog to delete: ', id);\n      dispatch({\n        type: 'DELETE_BLOG',\n        data: id\n      });\n    } catch (exception) {\n      dispatch(setNotification('Error deleting blog!'));\n    }\n  };\n};\nexport default blogReducer;","map":{"version":3,"sources":["/Users/jonathandennis/blog-app/client/src/reducers/blogReducer.js"],"names":["blogService","setNotification","blogReducer","state","action","console","log","type","data","filter","blog","id","map","comment","comments","initializeBlogs","dispatch","blogs","getAll","exception","createBlog","title","author","url","newBlog","create","likeBlog","changedBlog","likes","newObject","update","addComment","newComment","deleteBlog","remove"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\nimport { setNotification } from './notificationReducer'\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state)\n  console.log('action now: ', action)\n  switch (action.type) {\n  case 'INIT_BLOGS':\n    return action.data\n  case 'NEW_BLOG':\n    return [...state, action.data]\n  case 'DELETE_BLOG': {\n    return state.filter(blog => blog.id !== action.data)\n  }\n  case 'LIKE_BLOG': {\n    const id = action.data.data.id\n    return state.map(blog => blog.id !== id ? blog : action.data.data)\n  }\n  case 'NEW_COMMENT': {\n    const id = action.id\n    const comment = action.data\n    return state.map(blog => blog.id !== id ? blog : {\n      ...blog,\n      comments: [...blog.comments, comment]\n    })\n  }\n\n  default:\n    return state\n  }\n}\n\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    try {\n      const blogs = await blogService.getAll()\n      dispatch({\n        type: 'INIT_BLOGS',\n        data: blogs,\n      })\n    } catch(exception){\n      dispatch(setNotification('Error getting blogs!'))\n    }\n  }\n}\n\nexport const createBlog = (title, author, url) => {\n  return async dispatch => {\n    try {\n      const newBlog = await blogService.create(title, author, url)\n      dispatch({\n        type: 'NEW_BLOG',\n        data: newBlog,\n      })\n    } catch(exception){\n      dispatch(setNotification('Error adding blog, missing content!'))\n    }\n  }\n}\n\nexport const likeBlog = (blog) => {\n  const changedBlog = {\n    ...blog,\n    likes: blog.likes + 1\n  }\n  return async dispatch => {\n    try {\n      const newObject = await blogService.update(blog.id, changedBlog)\n      dispatch({\n        type: 'LIKE_BLOG',\n        data: newObject\n      })\n    } catch(exception){\n      dispatch(setNotification('Error liking blog!'))\n    }\n  }\n}\n\nexport const addComment = (id, comment) => {\n  return async dispatch => {\n    try {\n      const newComment = await blogService.addComment(id, comment)\n      dispatch({\n        type: 'NEW_COMMENT',\n        data: newComment, id\n      })\n    } catch(exception){\n      dispatch(setNotification('Error, Requires content!'))\n    }\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    try {\n      await blogService.remove(id)\n      console.log('blog to delete: ', id)\n      dispatch({\n        type: 'DELETE_BLOG',\n        data: id,\n      })\n    } catch(exception){\n      dispatch(setNotification('Error deleting blog!'))\n    }\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}