{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandennis/MOOC_fullStack/part5/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Blog from './components/Blog';\nimport Notification from './components/Notification';\nimport BlogForm from './components/BlogForm';\nimport LoginForm from './components/LoginForm';\nimport Togglable from './components/Togglable';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const blogFormRef = useRef();\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, []);\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []);\n\n  const notify = (message, type = 'error') => {\n    setNotification({\n      type,\n      message\n    });\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  const addBlog = blogObject => {\n    console.log('blogObject: ', blogObject);\n    blogFormRef.current.toggleVisibility();\n    blogService.create(blogObject).then(returnedBlog => {\n      setBlogs(blogs.concat(returnedBlog));\n      notify(`a new blog ${blogObject.title} by ${blogObject.author} added`, 'ok');\n    });\n  };\n\n  const deleteBlog = (id, blog) => {\n    console.log('id in deleteBlog: ', blog);\n    let title = blog.title;\n    let author = blog.author;\n\n    if (window.confirm(`Remove blog: ${title} by: ${author}?`)) {\n      blogService.remove(id);\n      setBlogs(blogs.filter(blog => blog.id !== id));\n    }\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    console.log('logging in with', username, password);\n\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      window.localStorage.setItem('loggedBlogappUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (error) {\n      notify('Wrong username or password');\n      setUsername('');\n      setPassword('');\n    }\n  };\n\n  const handleLogout = async () => {\n    window.localStorage.removeItem('loggedBlogappUser', JSON.stringify(user));\n    setUser(null);\n    notify(`${user.name} has been sucessfully logged out.`, 'ok');\n  };\n\n  const loginForm = () => /*#__PURE__*/React.createElement(LoginForm, {\n    username: username,\n    password: password,\n    handleUsernameChange: ({\n      target\n    }) => setUsername(target.value),\n    handlePasswordChange: ({\n      target\n    }) => setPassword(target.value),\n    handleSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  });\n\n  const blogForm = () => /*#__PURE__*/React.createElement(Togglable, {\n    buttonLabel: \"new blog\",\n    ref: blogFormRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BlogForm, {\n    createBlog: addBlog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  })); // Display list of blogs\n\n\n  const bloglist = () => blogs.map(blog => /*#__PURE__*/React.createElement(Blog, {\n    key: blog.id,\n    user: user,\n    blog: blog,\n    blogs: blogs,\n    setBlogs: setBlogs,\n    deleteBlog: deleteBlog,\n    notify: notify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  })); // Sort blogs by number of likes\n\n\n  const sortBlogs = blogs => {\n    blogs.sort((a, b) => {\n      return b.likes - a.likes;\n    });\n  };\n\n  if (user === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Notification, {\n      message: notification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }), loginForm());\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Notification, {\n    message: notification,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"blogs\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, user.name, \" logged in  \", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, \"logout\")), blogForm(), sortBlogs(blogs), bloglist());\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/jonathandennis/MOOC_fullStack/part5/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","useRef","Blog","Notification","BlogForm","LoginForm","Togglable","blogService","loginService","App","blogs","setBlogs","username","setUsername","password","setPassword","user","setUser","notification","setNotification","blogFormRef","getAll","then","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","notify","message","type","setTimeout","addBlog","blogObject","console","log","current","toggleVisibility","create","returnedBlog","concat","title","author","deleteBlog","id","blog","confirm","remove","filter","handleLogin","event","preventDefault","login","setItem","stringify","error","handleLogout","removeItem","name","loginForm","target","value","blogForm","bloglist","map","sortBlogs","sort","a","b","likes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport Notification from './components/Notification'\nimport BlogForm from './components/BlogForm'\nimport LoginForm from './components/LoginForm'\nimport Togglable from './components/Togglable'\nimport blogService from './services/blogs'\nimport loginService from './services/login' \n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('') \n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState(null)\n\n  const blogFormRef = useRef()\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs( blogs )\n    )  \n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  const notify = (message, type='error') => {\n    setNotification({ type,message })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const addBlog = (blogObject) => {\n    console.log('blogObject: ', blogObject)\n    blogFormRef.current.toggleVisibility()\n    blogService\n      .create(blogObject)\n      .then(returnedBlog => {\n        setBlogs(blogs.concat(returnedBlog))\n        notify(`a new blog ${blogObject.title} by ${blogObject.author} added`, 'ok')\n      })\n  }\n\n  const deleteBlog = (id, blog) => {\n    console.log('id in deleteBlog: ', blog)\n    let title = blog.title\n    let author = blog.author\n\n      if (window.confirm(`Remove blog: ${title} by: ${author}?`)) {\n\n        blogService\n      .remove(id)\n      setBlogs(blogs.filter(blog => blog.id !== id))        \n      }\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    console.log('logging in with', username, password)\n\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedBlogappUser', JSON.stringify(user)\n      )\n      blogService.setToken(user.token) \n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (error) {\n      notify('Wrong username or password')\n      setUsername('')\n      setPassword('')\n    }\n  }\n\n  const handleLogout = async () => {\n    window.localStorage.removeItem(\n      'loggedBlogappUser', JSON.stringify(user)\n    )\n    setUser(null)\n    notify(`${user.name} has been sucessfully logged out.`, 'ok')\n  }\n\n  const loginForm = () => (\n      <LoginForm\n        username={username}\n        password={password}\n        handleUsernameChange={({ target }) => setUsername(target.value)}\n        handlePasswordChange={({ target }) => setPassword(target.value)}\n        handleSubmit={handleLogin}\n      />\n  )\n\n  const blogForm = () => (\n    <Togglable buttonLabel='new blog' ref={blogFormRef}>\n      <BlogForm createBlog={addBlog} />\n    </Togglable>\n  )\n\n  // Display list of blogs\n  const bloglist = () => blogs.map(blog =>\n    <Blog \n      key={blog.id}\n      user={user} \n      blog={blog}\n      blogs={blogs}\n      setBlogs={setBlogs}\n      deleteBlog={deleteBlog}\n      notify={notify} \n    />\n  )\n\n  // Sort blogs by number of likes\n  const sortBlogs = (blogs) => {\n    blogs.sort((a, b) => {return b.likes - a.likes})\n  }\n\n  if (user === null) {\n    return (\n      <div>\n      <Notification message={notification} />\n      {loginForm()}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Notification message={notification} />\n\n      <h2>blogs</h2>\n          \n      <p>{user.name} logged in  <button type=\"submit\" onClick={handleLogout}>logout</button></p>\n\n      {blogForm()}\n      {sortBlogs(blogs)}\n      {bloglist()}\n\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}