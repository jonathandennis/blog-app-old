{"ast":null,"code":"var _jsxFileName = \"/Users/jonathandennis/MOOC_fullStack/part5/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Blog from './components/Blog';\nimport Notification from './components/Notification';\nimport BlogForm from './components/BlogForm';\nimport LoginForm from './components/LoginForm';\nimport Footer from './components/Footer';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport { initializeBlogs } from './reducers/blogReducer';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [notification, setNotification] = useState(null);\n  const dispatch = useDispatch();\n  const blogs = useSelector(state => state);\n  useEffect(() => {\n    dispatch(initializeBlogs());\n  }, [dispatch]);\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n    }\n  }, []);\n\n  const notify = (message, type = 'error') => {\n    setNotification({\n      type,\n      message\n    });\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  const deleteBlog = id => {\n    const toDelete = blogs.find(blog => blog.id === id);\n\n    if (window.confirm(`Remove: ${toDelete.title} By: ${toDelete.author}?`)) {\n      blogService.remove(id); //setBlogs(blogs.filter(blog => blog.id !== id))\n\n      notify(`${toDelete.title} by ${toDelete.author} was successfully deleted!`, 'ok');\n    }\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n    console.log('logging in with', username, password);\n\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      window.localStorage.setItem('loggedBlogappUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setUser(user);\n      setUsername('');\n      setPassword('');\n    } catch (error) {\n      notify('Wrong username or password');\n      setUsername('');\n      setPassword('');\n    }\n  };\n\n  const handleLogout = async () => {\n    window.localStorage.removeItem('loggedBlogappUser', JSON.stringify(user));\n    setUser(null);\n    notify(`${user.name} has been sucessfully logged out.`, 'ok');\n  };\n\n  const loginForm = () => /*#__PURE__*/React.createElement(LoginForm, {\n    username: username,\n    password: password,\n    handleUsernameChange: ({\n      target\n    }) => setUsername(target.value),\n    handlePasswordChange: ({\n      target\n    }) => setPassword(target.value),\n    handleSubmit: handleLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }); // const blogForm = () => (\n  //   <BlogForm />\n  // )\n  // Display list of blogs\n  // const bloglist = () => blogs.map(blog =>\n  //   <Blog\n  //     key={blog.id}\n  //     user={user}\n  //     blog={blog}\n  //     deleteBlog={deleteBlog}\n  //     notify={notify}\n  //   />\n  // )\n  // // Sort blogs by number of likes\n  // const sortBlogs = (blogs) => {\n  //   blogs.sort((a, b) => {return b.likes - a.likes})\n  //}\n\n\n  if (user === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Notification, {\n      message: notification,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), loginForm(), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const byLikes = (b1, b2) => b2.likes - b1.likes;\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"blogs\"), /*#__PURE__*/React.createElement(Notification, {\n    message: notification,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, user.name, \" logged in  \", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: handleLogout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }, \"logout\")), /*#__PURE__*/React.createElement(BlogForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), blogs.sort(byLikes).map(blog => /*#__PURE__*/React.createElement(Blog, {\n    key: blog.id,\n    user: user,\n    blog: blog,\n    deleteBlog: deleteBlog,\n    notify: notify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/jonathandennis/MOOC_fullStack/part5/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","Blog","Notification","BlogForm","LoginForm","Footer","blogService","loginService","initializeBlogs","useDispatch","useSelector","App","username","setUsername","password","setPassword","user","setUser","notification","setNotification","dispatch","blogs","state","loggedUserJSON","window","localStorage","getItem","JSON","parse","setToken","token","notify","message","type","setTimeout","deleteBlog","id","toDelete","find","blog","confirm","title","author","remove","handleLogin","event","preventDefault","console","log","login","setItem","stringify","error","handleLogout","removeItem","name","loginForm","target","value","byLikes","b1","b2","likes","sort","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport Notification from './components/Notification'\nimport BlogForm from './components/BlogForm'\nimport LoginForm from './components/LoginForm'\nimport Footer from './components/Footer'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\n\nimport { initializeBlogs } from './reducers/blogReducer'\nimport { useDispatch, useSelector } from 'react-redux'\n\nconst App = () => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState(null)\n\n  const dispatch = useDispatch()\n  const blogs = useSelector(state => state)\n\n\n  useEffect(() => {\n    dispatch(initializeBlogs())\n  }, [dispatch])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n\n  const notify = (message, type='error') => {\n    setNotification({ type,message })\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const deleteBlog = (id) => {\n    const toDelete = blogs.find(blog => blog.id === id)\n\n    if (window.confirm(`Remove: ${toDelete.title} By: ${toDelete.author}?`)) {\n\n      blogService\n        .remove(id)\n      //setBlogs(blogs.filter(blog => blog.id !== id))\n      notify(`${toDelete.title} by ${toDelete.author} was successfully deleted!`, 'ok')\n    }\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    console.log('logging in with', username, password)\n\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n\n      window.localStorage.setItem(\n        'loggedBlogappUser', JSON.stringify(user)\n      )\n      blogService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (error) {\n      notify('Wrong username or password')\n      setUsername('')\n      setPassword('')\n    }\n  }\n\n  const handleLogout = async () => {\n    window.localStorage.removeItem(\n      'loggedBlogappUser', JSON.stringify(user)\n    )\n    setUser(null)\n    notify(`${user.name} has been sucessfully logged out.`, 'ok')\n  }\n\n  const loginForm = () => (\n    <LoginForm\n      username={username}\n      password={password}\n      handleUsernameChange={({ target }) => setUsername(target.value)}\n      handlePasswordChange={({ target }) => setPassword(target.value)}\n      handleSubmit={handleLogin}\n    />\n  )\n\n  // const blogForm = () => (\n  //   <BlogForm />\n  // )\n\n  // Display list of blogs\n  // const bloglist = () => blogs.map(blog =>\n  //   <Blog\n  //     key={blog.id}\n  //     user={user}\n  //     blog={blog}\n  //     deleteBlog={deleteBlog}\n  //     notify={notify}\n  //   />\n  // )\n\n  // // Sort blogs by number of likes\n  // const sortBlogs = (blogs) => {\n  //   blogs.sort((a, b) => {return b.likes - a.likes})\n  //}\n\n  if (user === null) {\n    return (\n      <div>\n        <Notification message={notification} />\n        {loginForm()}\n        <Footer />\n      </div>\n    )\n  }\n\n  const byLikes = (b1, b2) => b2.likes - b1.likes\n\n  return (\n    <div>\n      <h2>blogs</h2>\n\n      <Notification message={notification} />\n\n      <p>{user.name} logged in  <button type=\"submit\" onClick={handleLogout}>logout</button></p>\n\n      <BlogForm />\n      {blogs.sort(byLikes).map(blog =>\n        <Blog\n          key={blog.id}\n          user={user}\n          blog={blog}\n          deleteBlog={deleteBlog}\n          notify={notify}\n        />\n      )}\n      <Footer />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}